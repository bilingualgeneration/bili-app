const functions = require("firebase-functions");

const aws = require("@aws-sdk/client-ses");
const cheerio = require("cheerio");
const fs = require("fs");
const nodemailer = require("nodemailer");
const path = require("path");
const PDFDocument = require("pdfkit");
const SVGtoPDF = require("svg-to-pdfkit");

const generatePage1 = (studentName: string, classCode: string) => {
  const pagePath = path.join(
    __dirname,
    "../assets",
    "caregiver_invite_page_1.svg",
  );
  //const pagePath = path.join(__dirname,'assets', 'page1.svg');
  const page = fs.readFileSync(pagePath, "utf8");

  const $ = cheerio.load(page, { xmlMode: true });
  $("#studentName").text(studentName);
  $("#classCode").text(classCode);
  return $.xml();
};

const generatePage2 = (email: string) => {
  const pagePath = path.join(
    __dirname,
    "../assets",
    "caregiver_invite_page_2.svg",
  );
  const page = fs.readFileSync(pagePath, "utf8");

  const $ = cheerio.load(page, { xmlMode: true });
  $("#email").text(email);
  return $.xml();
};

const generatePDF = async (
  studentName: string,
  classCode: string,
  email: string,
) => {
  return new Promise((resolve, reject) => {
    const svg1 = generatePage1(studentName, classCode);
    const svg2 = generatePage2(email);
    let buffers: any[] = [];

    const doc = new PDFDocument();
    doc.on("data", buffers.push.bind(buffers));
    doc.on("end", () => {
      resolve(Buffer.concat(buffers));
    });
    SVGtoPDF(doc, svg1, 0, 0);
    doc.addPage();
    SVGtoPDF(doc, svg2, 0, 0);
    doc.end();
  });
};

const ses = new aws.SES({
  apiVersion: "2010-12-01",
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

const transporter = nodemailer.createTransport({
  SES: { ses, aws },
});

const sendMail = async (name: string, code: string, email: string) => {
  const buffer = await generatePDF(name, code, email);

  const mailOptions = {
    from: "support@thebiliapp.com",
    to: email,
    subject: "Hello with PDF Attachment from AWS SES",
    text: "This is a test email sent using AWS SES with an attachment (PDF generated by PDFKit).",
    html: "<strong>This is a test email sent using AWS SES with an attachment (PDF generated by PDFKit).</strong>",
    attachments: [
      {
        filename: "example.pdf", // The name of the attachment
        content: buffer, // Use the in-memory PDF stream
        encoding: "base64", // Encoding is not strictly necessary with a stream, but kept for safety
      },
    ],
  };

  // Send the email with the PDF attachment
  transporter.sendMail(mailOptions, (err: any, info: any) => {
    if (err) {
      console.error("Error sending email:", err);
    } else {
      console.log("Email sent successfully:", info.response);
    }
  });
};

export const inviteCaregiverTaskDaemon = functions.https.onRequest(
  async (req: any, res: any) => {
    try {
      const { studentName, classCode, email } = req.body;
      const a = await sendMail(studentName, classCode, email);
      res.status(200).send(JSON.stringify(a));
    } catch (error: any) {
      res.status(500).send(JSON.stringify(error));
    }
  },
);
